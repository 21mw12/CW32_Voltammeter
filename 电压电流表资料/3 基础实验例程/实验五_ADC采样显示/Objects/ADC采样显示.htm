<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ADC采样显示.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ADC采样显示.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Mar 18 14:19:01 2024
<BR><P>
<H3>Maximum Stack Usage =        124 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; ADC_init &rArr; ADC_SerialChContinuousModeCfg &rArr; ADC_SerialChCommon &rArr; ADC_Sqr0ChannelCfg
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[32]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC_IRQHandler</a> from interrupts_cw32f003.o(i.ADC_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[13]">ATIM_IRQHandler</a> from interrupts_cw32f003.o(i.ATIM_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[1e]">AWT_IRQHandler</a> from interrupts_cw32f003.o(i.AWT_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[17]">BTIM1_IRQHandler</a> from interrupts_cw32f003.o(i.BTIM1_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[18]">BTIM2_IRQHandler</a> from interrupts_cw32f003.o(i.BTIM2_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[19]">BTIM3_IRQHandler</a> from interrupts_cw32f003.o(i.BTIM3_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[d]">FLASHRAM_IRQHandler</a> from interrupts_cw32f003.o(i.FLASHRAM_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[f]">GPIOA_IRQHandler</a> from interrupts_cw32f003.o(i.GPIOA_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[10]">GPIOB_IRQHandler</a> from interrupts_cw32f003.o(i.GPIOB_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[11]">GPIOC_IRQHandler</a> from interrupts_cw32f003.o(i.GPIOC_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[16]">GTIM_IRQHandler</a> from interrupts_cw32f003.o(i.GTIM_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from interrupts_cw32f003.o(i.HardFault_Handler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[1a]">I2C_IRQHandler</a> from interrupts_cw32f003.o(i.I2C_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[c]">LVD_IRQHandler</a> from interrupts_cw32f003.o(i.LVD_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from interrupts_cw32f003.o(i.NMI_Handler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from interrupts_cw32f003.o(i.PendSV_Handler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_cw32f003.o(.text) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[1b]">SPI_IRQHandler</a> from interrupts_cw32f003.o(i.SPI_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from interrupts_cw32f003.o(i.SVC_Handler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[e]">SYSCTRL_IRQHandler</a> from interrupts_cw32f003.o(i.SYSCTRL_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from cw32f003_systick.o(i.SysTick_Handler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_cw32f003.o(i.SystemInit) referenced from startup_cw32f003.o(.text)
 <LI><a href="#[1c]">UART1_IRQHandler</a> from interrupts_cw32f003.o(i.UART1_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[1d]">UART2_IRQHandler</a> from interrupts_cw32f003.o(i.UART2_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[14]">VC1_IRQHandler</a> from interrupts_cw32f003.o(i.VC1_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[15]">VC2_IRQHandler</a> from interrupts_cw32f003.o(i.VC2_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[b]">WDT_IRQHandler</a> from interrupts_cw32f003.o(i.WDT_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[21]">__main</a> from __main.o(!!!main) referenced from startup_cw32f003.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[22]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[24]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[60]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[61]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[25]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[62]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[29]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[63]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[64]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[65]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[66]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[67]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[68]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[69]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[6a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[6b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[6c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[6d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[6f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[70]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[71]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[72]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[73]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[74]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[75]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[76]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[77]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[78]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[79]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[7a]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[7b]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[7c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[7d]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[7e]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[7f]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[23]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[80]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[26]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[28]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[81]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ADC_init &rArr; ADC_SerialChContinuousModeCfg &rArr; ADC_SerialChCommon &rArr; ADC_Sqr0ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[82]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[34]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[83]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_cw32f003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_cw32f003.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Sysctrl_GetHClkFreq
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volt_Cal
</UL>

<P><STRONG><a name="[87]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2c]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[8a]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8b]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[8c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>ADC_BufEnSerialCh</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, cw32f003_adc.o(i.ADC_BufEnSerialCh))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr0ChannelCfg
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr03ChannelCfg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr02ChannelCfg
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr01ChannelCfg
</UL>

<P><STRONG><a name="[43]"></a>ADC_ClearITPendingAll</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cw32f003_adc.o(i.ADC_ClearITPendingAll))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[35]"></a>ADC_Enable</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, cw32f003_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[36]"></a>ADC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cw32f003_adc.o(i.ADC_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[52]"></a>ADC_GetSqr0Result</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cw32f003_adc.o(i.ADC_GetSqr0Result))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value
</UL>

<P><STRONG><a name="[12]"></a>ADC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>ADC_Init</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, cw32f003_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[37]"></a>ADC_SerialChCommon</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cw32f003_adc.o(i.ADC_SerialChCommon))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_SerialChCommon &rArr; ADC_Sqr0ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr0ChannelCfg
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr03ChannelCfg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr02ChannelCfg
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr01ChannelCfg
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChContinuousModeCfg
</UL>

<P><STRONG><a name="[3d]"></a>ADC_SerialChContinuousModeCfg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cw32f003_adc.o(i.ADC_SerialChContinuousModeCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_SerialChContinuousModeCfg &rArr; ADC_SerialChCommon &rArr; ADC_Sqr0ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[44]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cw32f003_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[3a]"></a>ADC_Sqr01ChannelCfg</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, cw32f003_adc.o(i.ADC_Sqr01ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Sqr01ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BufEnSerialCh
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[3b]"></a>ADC_Sqr02ChannelCfg</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, cw32f003_adc.o(i.ADC_Sqr02ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Sqr02ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BufEnSerialCh
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[3c]"></a>ADC_Sqr03ChannelCfg</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, cw32f003_adc.o(i.ADC_Sqr03ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Sqr03ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BufEnSerialCh
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[39]"></a>ADC_Sqr0ChannelCfg</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, cw32f003_adc.o(i.ADC_Sqr0ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Sqr0ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BufEnSerialCh
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[41]"></a>ADC_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cw32f003_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[3f]"></a>ADC_init</STRONG> (Thumb, 126 bytes, Stack size 104 bytes, adc.o(i.ADC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ADC_init &rArr; ADC_SerialChContinuousModeCfg &rArr; ADC_SerialChCommon &rArr; ADC_Sqr0ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChContinuousModeCfg
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearITPendingAll
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13]"></a>ATIM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.ATIM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>AWT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.AWT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>BTIM1_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, interrupts_cw32f003.o(i.BTIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BTIM1_IRQHandler &rArr; Dis_Refresh &rArr; Seg_Dis &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_GetITStatus
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_ClearITPendingBit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Refresh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>BTIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.BTIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>BTIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.BTIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>BTIM_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cw32f003_btim.o(i.BTIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>BTIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cw32f003_btim.o(i.BTIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Btim1_Init
</UL>

<P><STRONG><a name="[45]"></a>BTIM_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cw32f003_btim.o(i.BTIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[4b]"></a>BTIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cw32f003_btim.o(i.BTIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Btim1_Init
</UL>

<P><STRONG><a name="[4a]"></a>BTIM_TimeBaseInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cw32f003_btim.o(i.BTIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BTIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Btim1_Init
</UL>

<P><STRONG><a name="[49]"></a>Btim1_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, btim1.o(i.Btim1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Btim1_Init &rArr; BTIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_TimeBaseInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_ITConfig
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>Close_Com</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, seg_dis.o(i.Close_Com))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Close_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Refresh
</UL>

<P><STRONG><a name="[48]"></a>Dis_Refresh</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, seg_dis.o(i.Dis_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Dis_Refresh &rArr; Seg_Dis &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seg_Dis
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_Com
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[50]"></a>Display</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, seg_dis.o(i.Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Display
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d]"></a>FLASHRAM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.FLASHRAM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>FLASH_SetLatency</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cw32f003_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[f]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.GPIOA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.GPIOB_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>GPIOC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.GPIOC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GPIO_Init</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, cw32f003_gpio.o(i.GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seg_Init
</UL>

<P><STRONG><a name="[4e]"></a>GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cw32f003_gpio.o(i.GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seg_Dis
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_Com
</UL>

<P><STRONG><a name="[16]"></a>GTIM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.GTIM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>Get_ADC_Value</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, adc.o(i.Get_ADC_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_ADC_Value
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetSqr0Result
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.I2C_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>LVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.LVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>RCC_Configuration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_Configuration &rArr; RCC_SYSCLKSRC_Config &rArr; RCC_Sysctrl_GetHClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSRC_Config
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLKPRS_Config
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSI_Enable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKPRS_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>RCC_HCLKPRS_Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cw32f003_rcc.o(i.RCC_HCLKPRS_Config))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[55]"></a>RCC_HSI_Enable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cw32f003_rcc.o(i.RCC_HSI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[58]"></a>RCC_PCLKPRS_Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cw32f003_rcc.o(i.RCC_PCLKPRS_Config))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[56]"></a>RCC_SYSCLKSRC_Config</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cw32f003_rcc.o(i.RCC_SYSCLKSRC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_SYSCLKSRC_Config &rArr; RCC_Sysctrl_GetHClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SystemCoreClockUpdate
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[59]"></a>RCC_Sysctrl_GetHClkFreq</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, cw32f003_rcc.o(i.RCC_Sysctrl_GetHClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_Sysctrl_GetHClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSRC_Config
</UL>

<P><STRONG><a name="[5a]"></a>RCC_SystemCoreClockUpdate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cw32f003_rcc.o(i.RCC_SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSRC_Config
</UL>

<P><STRONG><a name="[1b]"></a>SPI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.SPI_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SYSCTRL_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.SYSCTRL_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>Seg_Dis</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, seg_dis.o(i.Seg_Dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Seg_Dis &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Refresh
</UL>

<P><STRONG><a name="[5c]"></a>Seg_Init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, seg_dis.o(i.Seg_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Seg_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cw32f003_systick.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_cw32f003.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, system_cw32f003.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.UART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>VC1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.VC1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>VC2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.VC2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>Volt_Cal</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, main.o(i.Volt_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Volt_Cal &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b]"></a>WDT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.WDT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cw32f003_i2c.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seg_Dis
</UL>

<P><STRONG><a name="[2b]"></a>main</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = main &rArr; ADC_init &rArr; ADC_SerialChContinuousModeCfg &rArr; ADC_SerialChCommon &rArr; ADC_Sqr0ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volt_Cal
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seg_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Btim1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[33]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
