<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\CW32_new_pro.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\CW32_new_pro.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Sat Jul 06 09:58:56 2024
<BR><P>
<H3>Maximum Stack Usage =        168 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Calibration_ReadInfo &rArr; ComputeK &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[e]">ATIM_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">ATIM_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">ADC_IRQHandler</a> from interrupts_cw32f003.o(i.ADC_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[e]">ATIM_IRQHandler</a> from startup_cw32f003.o(.text) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[19]">AWT_IRQHandler</a> from interrupts_cw32f003.o(i.AWT_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[12]">BTIM1_IRQHandler</a> from main.o(i.BTIM1_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[13]">BTIM2_IRQHandler</a> from main.o(i.BTIM2_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[14]">BTIM3_IRQHandler</a> from interrupts_cw32f003.o(i.BTIM3_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[8]">FLASHRAM_IRQHandler</a> from interrupts_cw32f003.o(i.FLASHRAM_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[a]">GPIOA_IRQHandler</a> from interrupts_cw32f003.o(i.GPIOA_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[b]">GPIOB_IRQHandler</a> from interrupts_cw32f003.o(i.GPIOB_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[c]">GPIOC_IRQHandler</a> from interrupts_cw32f003.o(i.GPIOC_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[11]">GTIM_IRQHandler</a> from interrupts_cw32f003.o(i.GTIM_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from interrupts_cw32f003.o(i.HardFault_Handler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[15]">I2C_IRQHandler</a> from interrupts_cw32f003.o(i.I2C_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[7]">LVD_IRQHandler</a> from interrupts_cw32f003.o(i.LVD_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from interrupts_cw32f003.o(i.NMI_Handler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from interrupts_cw32f003.o(i.PendSV_Handler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_cw32f003.o(.text) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[16]">SPI_IRQHandler</a> from interrupts_cw32f003.o(i.SPI_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from interrupts_cw32f003.o(i.SVC_Handler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[9]">SYSCTRL_IRQHandler</a> from interrupts_cw32f003.o(i.SYSCTRL_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from cw32f003_systick.o(i.SysTick_Handler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[1b]">SystemInit</a> from system_cw32f003.o(i.SystemInit) referenced from startup_cw32f003.o(.text)
 <LI><a href="#[17]">UART1_IRQHandler</a> from interrupts_cw32f003.o(i.UART1_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[18]">UART2_IRQHandler</a> from interrupts_cw32f003.o(i.UART2_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[f]">VC1_IRQHandler</a> from interrupts_cw32f003.o(i.VC1_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[10]">VC2_IRQHandler</a> from interrupts_cw32f003.o(i.VC2_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[6]">WDT_IRQHandler</a> from interrupts_cw32f003.o(i.WDT_IRQHandler) referenced from startup_cw32f003.o(RESET)
 <LI><a href="#[1c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_cw32f003.o(.text)
 <LI><a href="#[1a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[78]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[79]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[7a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[7b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[7c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_cw32f003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>ATIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cw32f003.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIM_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[20]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTick
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverageFilter
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Sysctrl_GetHClkFreq
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[1f]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_VA
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetV2
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetV1
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetA2
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetA1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_OnlyV
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_OnlyA
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelInit
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ToVoltage
</UL>

<P><STRONG><a name="[21]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeK
</UL>

<P><STRONG><a name="[23]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeK
</UL>

<P><STRONG><a name="[25]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ToVoltage
</UL>

<P><STRONG><a name="[27]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeK
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ToVoltage
</UL>

<P><STRONG><a name="[28]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeK
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[81]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[82]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[26]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[24]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[22]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[1e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[84]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>ADC_BufEnSerialCh</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, cw32f003_adc.o(i.ADC_BufEnSerialCh))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr0ChannelCfg
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr03ChannelCfg
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr02ChannelCfg
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr01ChannelCfg
</UL>

<P><STRONG><a name="[2e]"></a>ADC_ChannelInit</STRONG> (Thumb, 146 bytes, Stack size 104 bytes, adc.o(i.ADC_ChannelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ADC_ChannelInit &rArr; ADC_SerialChContinuousModeCfg &rArr; ADC_SerialChCommon &rArr; ADC_Sqr0ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChContinuousModeCfg
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearITPendingAll
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>ADC_ClearITPendingAll</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cw32f003_adc.o(i.ADC_ClearITPendingAll))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelInit
</UL>

<P><STRONG><a name="[34]"></a>ADC_Enable</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, cw32f003_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelInit
</UL>

<P><STRONG><a name="[36]"></a>ADC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cw32f003_adc.o(i.ADC_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[38]"></a>ADC_GetSqr0Result</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cw32f003_adc.o(i.ADC_GetSqr0Result))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetValue
</UL>

<P><STRONG><a name="[39]"></a>ADC_GetSqr1Result</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cw32f003_adc.o(i.ADC_GetSqr1Result))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetValue
</UL>

<P><STRONG><a name="[37]"></a>ADC_GetValue</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adc.o(i.ADC_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetSqr1Result
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetSqr0Result
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>ADC_Init</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, cw32f003_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[3a]"></a>ADC_SerialChCommon</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cw32f003_adc.o(i.ADC_SerialChCommon))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_SerialChCommon &rArr; ADC_Sqr0ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr0ChannelCfg
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr03ChannelCfg
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr02ChannelCfg
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr01ChannelCfg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChContinuousModeCfg
</UL>

<P><STRONG><a name="[32]"></a>ADC_SerialChContinuousModeCfg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cw32f003_adc.o(i.ADC_SerialChContinuousModeCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_SerialChContinuousModeCfg &rArr; ADC_SerialChCommon &rArr; ADC_Sqr0ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelInit
</UL>

<P><STRONG><a name="[35]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cw32f003_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelInit
</UL>

<P><STRONG><a name="[3d]"></a>ADC_Sqr01ChannelCfg</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, cw32f003_adc.o(i.ADC_Sqr01ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Sqr01ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BufEnSerialCh
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[3e]"></a>ADC_Sqr02ChannelCfg</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, cw32f003_adc.o(i.ADC_Sqr02ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Sqr02ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BufEnSerialCh
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[3f]"></a>ADC_Sqr03ChannelCfg</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, cw32f003_adc.o(i.ADC_Sqr03ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Sqr03ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BufEnSerialCh
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[3c]"></a>ADC_Sqr0ChannelCfg</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, cw32f003_adc.o(i.ADC_Sqr0ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Sqr0ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BufEnSerialCh
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[30]"></a>ADC_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cw32f003_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelInit
</UL>

<P><STRONG><a name="[75]"></a>ADC_ToElectricity</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, calibration.o(i.ADC_ToElectricity))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>ADC_ToVoltage</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, calibration.o(i.ADC_ToVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADC_ToVoltage &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19]"></a>AWT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.AWT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>AverageFilter</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, averagefilter.o(i.AverageFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AverageFilter &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>BTIM1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.BTIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BTIM1_IRQHandler &rArr; Nixie_Show &rArr; Nixie_SetNum &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_Show
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_GetITStatus
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>BTIM1_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, btim.o(i.BTIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTIM1_Init &rArr; BTIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_TimeBaseInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_ITConfig
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_Cmd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13]"></a>BTIM2_IRQHandler</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, main.o(i.BTIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BTIM2_IRQHandler &rArr; Calibration_SaveInfo &rArr; FLASH_Write &rArr; FLASH_Erase &rArr; FLASH_UnlockPages
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetState
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_SetInfo
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_SaveInfo
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_GetITStatus
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>BTIM2_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, btim.o(i.BTIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTIM2_Init &rArr; BTIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_TimeBaseInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_ITConfig
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_Cmd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
</UL>

<P><STRONG><a name="[14]"></a>BTIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.BTIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>BTIM_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cw32f003_btim.o(i.BTIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM2_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>BTIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cw32f003_btim.o(i.BTIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM2_Init
</UL>

<P><STRONG><a name="[45]"></a>BTIM_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cw32f003_btim.o(i.BTIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM2_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[4b]"></a>BTIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cw32f003_btim.o(i.BTIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM2_Init
</UL>

<P><STRONG><a name="[4a]"></a>BTIM_TimeBaseInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cw32f003_btim.o(i.BTIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BTIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM2_Init
</UL>

<P><STRONG><a name="[51]"></a>Calibration_ReadInfo</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, calibration.o(i.Calibration_ReadInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Calibration_ReadInfo &rArr; ComputeK &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeK
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>Calibration_SaveInfo</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, calibration.o(i.Calibration_SaveInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Calibration_SaveInfo &rArr; FLASH_Write &rArr; FLASH_Erase &rArr; FLASH_UnlockPages
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM2_IRQHandler
</UL>

<P><STRONG><a name="[4e]"></a>Calibration_SetInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, calibration.o(i.Calibration_SetInfo))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM2_IRQHandler
</UL>

<P><STRONG><a name="[53]"></a>ComputeK</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, calibration.o(i.ComputeK))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ComputeK &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_ReadInfo
</UL>

<P><STRONG><a name="[8]"></a>FLASHRAM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.FLASHRAM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>FLASH_Erase</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, flash.o(i.FLASH_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_Erase &rArr; FLASH_UnlockPages
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UnlockPages
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LockAllPages
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePages
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
</UL>

<P><STRONG><a name="[57]"></a>FLASH_ErasePages</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, cw32f003_flash.o(i.FLASH_ErasePages))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_ErasePages
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[58]"></a>FLASH_LockAllPages</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cw32f003_flash.o(i.FLASH_LockAllPages))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
</UL>

<P><STRONG><a name="[52]"></a>FLASH_Read</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, flash.o(i.FLASH_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_ReadInfo
</UL>

<P><STRONG><a name="[6d]"></a>FLASH_SetLatency</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cw32f003_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[56]"></a>FLASH_UnlockPages</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cw32f003_flash.o(i.FLASH_UnlockPages))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_UnlockPages
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
</UL>

<P><STRONG><a name="[59]"></a>FLASH_WirteHalfWords</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, cw32f003_flash.o(i.FLASH_WirteHalfWords))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WirteHalfWords
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
</UL>

<P><STRONG><a name="[54]"></a>FLASH_Write</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, flash.o(i.FLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FLASH_Write &rArr; FLASH_Erase &rArr; FLASH_UnlockPages
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WirteHalfWords
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UnlockPages
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LockAllPages
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_SaveInfo
</UL>

<P><STRONG><a name="[76]"></a>FirmwareDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, system_cw32f003.o(i.FirmwareDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FirmwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.GPIOA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.GPIOB_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>GPIOC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.GPIOC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>GPIO_Init</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, cw32f003_gpio.o(i.GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelInit
</UL>

<P><STRONG><a name="[5d]"></a>GPIO_ReadPin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cw32f003_gpio.o(i.GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GetAction
</UL>

<P><STRONG><a name="[68]"></a>GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cw32f003_gpio.o(i.GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_SetNum
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_SetLocation
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_CloseLocation
</UL>

<P><STRONG><a name="[11]"></a>GTIM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.GTIM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.I2C_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>InitTick</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cw32f003_systick.o(i.InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[5c]"></a>KEY_GetAction</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, keystatemachine.o(i.KEY_GetAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KEY_GetAction
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetState
</UL>

<P><STRONG><a name="[4d]"></a>Key_GetState</STRONG> (Thumb, 350 bytes, Stack size 8 bytes, keystatemachine.o(i.Key_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Key_GetState &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GetAction
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM2_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>Key_Init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, keystatemachine.o(i.Key_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Key_Init &rArr; BTIM2_Init &rArr; BTIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>LVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.LVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>Menu_OnlyA</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, menu.o(i.Menu_OnlyA))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Menu_OnlyA &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>Menu_OnlyV</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, menu.o(i.Menu_OnlyV))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Menu_OnlyV &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>Menu_SetA1</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, menu.o(i.Menu_SetA1))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Menu_SetA1 &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>Menu_SetA2</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, menu.o(i.Menu_SetA2))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Menu_SetA2 &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>Menu_SetV1</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, menu.o(i.Menu_SetV1))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Menu_SetV1 &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>Menu_SetV2</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, menu.o(i.Menu_SetV2))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Menu_SetV2 &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>Menu_VA</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, menu.o(i.Menu_VA))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Menu_VA &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>Nixie_CloseLocation</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, nixie.o(i.Nixie_CloseLocation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Nixie_CloseLocation
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_SetLocation
</UL>

<P><STRONG><a name="[69]"></a>Nixie_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, nixie.o(i.Nixie_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Nixie_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>Nixie_SetLocation</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, nixie.o(i.Nixie_SetLocation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Nixie_SetLocation &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_CloseLocation
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_Show
</UL>

<P><STRONG><a name="[6b]"></a>Nixie_SetNum</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, nixie.o(i.Nixie_SetNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Nixie_SetNum &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_Show
</UL>

<P><STRONG><a name="[47]"></a>Nixie_Show</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nixie.o(i.Nixie_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Nixie_Show &rArr; Nixie_SetNum &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_SetNum
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_SetLocation
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>RCC_Configuration</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RCC_Configuration &rArr; RCC_SYSCLKSRC_Config &rArr; RCC_Sysctrl_GetHClkFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSRC_Config
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLKPRS_Config
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSI_Enable
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKPRS_Config
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTick
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>RCC_HCLKPRS_Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cw32f003_rcc.o(i.RCC_HCLKPRS_Config))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[6e]"></a>RCC_HSI_Enable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cw32f003_rcc.o(i.RCC_HSI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[71]"></a>RCC_PCLKPRS_Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cw32f003_rcc.o(i.RCC_PCLKPRS_Config))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[6f]"></a>RCC_SYSCLKSRC_Config</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cw32f003_rcc.o(i.RCC_SYSCLKSRC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RCC_SYSCLKSRC_Config &rArr; RCC_Sysctrl_GetHClkFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SystemCoreClockUpdate
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[72]"></a>RCC_Sysctrl_GetHClkFreq</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, cw32f003_rcc.o(i.RCC_Sysctrl_GetHClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RCC_Sysctrl_GetHClkFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSRC_Config
</UL>

<P><STRONG><a name="[73]"></a>RCC_SystemCoreClockUpdate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cw32f003_rcc.o(i.RCC_SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSRC_Config
</UL>

<P><STRONG><a name="[16]"></a>SPI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.SPI_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SYSCTRL_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.SYSCTRL_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cw32f003_systick.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_cw32f003.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1b]"></a>SystemInit</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, system_cw32f003.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.UART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>VC1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.VC1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>VC2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.VC2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WDT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f003.o(i.WDT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f003.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[5e]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetState
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_SetNum
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_SetLocation
</UL>

<P><STRONG><a name="[85]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[86]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[87]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1a]"></a>main</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; Calibration_ReadInfo &rArr; ComputeK &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_VA
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetV2
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetV1
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetA2
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetA1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_OnlyV
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_OnlyA
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareDelay
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_ReadInfo
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverageFilter
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ToVoltage
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ToElectricity
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetValue
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelInit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5b]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, cw32f003_systick.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTick
</UL>

<P><STRONG><a name="[49]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, btim.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM2_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
